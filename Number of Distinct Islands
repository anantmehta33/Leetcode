//{ Driver Code Starts
// Initial Template for C++
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
// User function Template for C++

class Solution {
  public:
  
    void dfs(int r, int c, vector<vector<int>> &grid, vector<pair<int, int>> &vec, vector<vector<int>> &vis, int r0, int c0)
       {
           vis[r][c] = 1;
           vec.push_back({r0-r,c0-c});
           
           
           vector<int> row_op;
           // row operations
           row_op.push_back(1);
           row_op.push_back(0);
           row_op.push_back(-1);
           row_op.push_back(0);
           
           vector<int> col_op;
           // col operations
           col_op.push_back(0);
           col_op.push_back(1);
           col_op.push_back(0);
           col_op.push_back(-1);
           
           
           for(int i=0;i<row_op.size();i++)
           {
               int nr = r + row_op[i];
               int nc = c + col_op[i];
               if(nr < grid.size() and nr>=0 and nc < grid[0].size() and nc>=0 and !vis[nr][nc] and 
               grid[nr][nc] == 1)
                  {
                      dfs(nr,nc,grid,vec,vis,r0,c0);
                  }
           }
           
           
           
       }
    int countDistinctIslands(vector<vector<int>>& grid) {
        // code here
        int n = grid.size();
        int m = grid[0].size();
        vector<vector<int>> vis;
        set<vector<pair<int,int>>> st;
        for(int i=0;i<n;i++)
        {
            vector<int> t;
            for(int j=0;j<m;j++)
            {
                
                t.push_back(0);
            }
            vis.push_back(t);
        }
        
          for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(vis[i][j] == 0 and grid[i][j] == 1)
                {
                    vector<pair<int,int>> vec;
                    dfs(i,j,grid,vec,vis,i,j);
                    st.insert(vec);
                    
                }
               
            }
        }
        return st.size();
    }
};


//{ Driver Code Starts.

int main() {

    int t;
    cin >> t;
    while (t--) {
        int n, m;
        cin >> n >> m;
        vector<vector<int>> grid(n, vector<int>(m));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                cin >> grid[i][j];
            }
        }
        Solution obj;
        cout << obj.countDistinctIslands(grid) << endl;
    }
}
// } Driver Code Ends
